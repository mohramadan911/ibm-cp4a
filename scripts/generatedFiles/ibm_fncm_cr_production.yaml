apiVersion: fncm.ibm.com/v1
kind: FNCMCluster
metadata:
  name: fncmdeploy
  labels:
    app.kubernetes.io/instance: ibm-fncm
    app.kubernetes.io/managed-by: ibm-fncm
    app.kubernetes.io/name: ibm-fncm
    release: 5.6.0
spec:
  ##########################################################################
  ## This section contains the shared configuration for all FNCM components #
  ##########################################################################
  appVersion: 24.0.0

  ## MUST exist, used to accept ibm license, valid value only can be "true"
  license:
    accept: true

  ## The optional components to be installed if listed here.  The user can choose what components to be installed.
  ## The optional components are: css (Content Search Services), cmis, es (External Share) and tm (Task Manager)
  content_optional_components:
    cmis: true
    css: false
    es: false
    tm: false
    cpe: true
    graphql: true
    ban: true
    ier: false
    iccsap: false

  shared_configuration:

    ## The deployment context as selected.
    sc_deployment_context: FNCM

    # Enable/disable FIPS mode for the deployment (default value is "false")
    enable_fips: true

    ## All FNCM components must use/share the image_pull_secrets to pull images
    image_pull_secrets:
    - ibm-entitlement-key

    ## All FNCM components must use/share the same docker image repository.  For example, if IBM Entitlement Registry is used, then 
    ## it should be "cp.icr.io".  Otherwise, it will be a local docker registry.
    sc_image_repository: cp.icr.io

    ## All FNCM components must use/share the root_ca_secret in order for integration
    root_ca_secret: fncm-root-ca

    ## FNCM capabilities to be deployed.  This CR represents the "content" pattern (aka FileNet Content Manager), which includes the following 
    ## mandatory components: cpe, icn (Navigator), graphql and optional components: css, cmis, es (External Share) and tm (Task Manager)
    sc_deployment_patterns: content

    ## The deployment type as selected.
    sc_deployment_type: production

    ## Choose the licensing model for the Product you are installing.
    ## IBM Content Foundation:
    ## - ICF.PVUNonProd
    ## - ICF.PVUProd
    ## - ICF.UVU
    ## - ICF.CU
    ## IBM Filenet Content Manager:
    ## - FNCM.PVUNonProd
    ## - FNCM.PVUProd
    ## - FNCM.UVU
    ## - FNCM.CU
    ## IBM Cloud Pak for Business Automation:
    ## - CP4BA.NonProd
    ## - CP4BA.Prod
    ## - CP4BA.User
    sc_fncm_license_model: CP4BA.NonProd

    ## Optional: You can specify a profile size for CloudPak - valid values are small,medium,large - default is small.
    sc_deployment_profile_size: small

    ## Specify the RunAsUser for the security context of the pod.  This is usually a numeric value that corresponds to a user ID.
    ## For non-OCP (e.g., CNCF platforms such as AWS, GKE, etc), this parameter is optional. It is not supported on OCP and ROKS.
    sc_run_as_user: null

    ## The platform to be deployed specified by the user.  Possible values are: OCP, ROKS and other.
    ## based on input from the user.
    sc_deployment_platform: other

    ## If the root certificate authority (CA) key of the external service is not signed by the operator root CA key, provide the TLS certificate of
    ## the external service to the component's truststore.
    trusted_certificate_list: []

    ## This is necessary if you want to use your own JDBC drivers and/or need to provide ICCSAP drivers.  If you are providing multiple JDBC drivers and ICCSAP drivers, 
    ## all the files must be compressed in a single file.
    ## First you need to package your drivers into a compressed package in the format of "saplibs/drivers_files" and/or 
    ## "jdbc/db2|oracle|postgresql|sqlserver/driver_files". For example, if you are providing your own DB2 and Oracle JDBC drivers and ICCSAP drivers, then the compressed
    ## file should have the following structure and content:
    ##   /jdbc/db2/db2jcc4.jar
    ##   /jdbc/db2/db2jcc_license_cu.jar
    ##   /jdbc/oracle/ojdbc8.jar
    ##   /saplibs/libicudata.so.50
    ##   /saplibs/...
    ## Then you need to put the compressed package on an anonymously accessible web server and provide the link here.
    ## The CR can handle .zip files using unzip as well as .tar, .tar.gz, .tar.bz2, .tar.xz. Does not handle .gz files, .bz2 files, .xz, or .zst files that do not contain a .tar archive.    
    #sc_drivers_url:
    ## Enable/disable ECM (FNCM) / BAN initialization (e.g., creation of P8 domain, creation/configuration of object stores,
    ## creation/configuration of CSS servers, and initialization of Navigator (ICN)).  If the "initialize_configuration" section
    ## is defined with the required parameters in the CR (below) and sc_content_initialization is set to "true" (or the parameter doesn't exist), then the initialization will occur.
    ## However, if sc_content_initialization is set to "false", then the initialization will not occur (even with the "initialize_configuration" section defined)
    sc_content_initialization: true
    ## OR
    ## If you want to enable the initialize for a specific product for ECM (FNCM) / BAN, you will need to use
    ## these fields instead.  Otherwise, use the default sc_content_initialization: false
    # sc_content_initialization:
    #  cpe: false
    #  css: false
    #  ban: false


    ## Enable/disable the ECM (FNCM) / BAN verification (e.g., creation of test folder, creation of test document,
    ## execution of CBR search, and creation of Navigator demo repository and desktop).  If the "verify_configuration"
    ## section is defined in the CR, then that configuration will take precedence overriding this parameter.  Note that if you are upgrading or
    ## migrating, set this parameter to "false" since the env has been previously verified.
    sc_content_verification: true
    ## OR
    ## If you want to enable the verification for a specific product for ECM (FNCM) / BAN, you will need to use
    ## these fields instead.  Otherwise, use the default sc_content_verification: false
    # sc_content_verification:
    #  cpe: false
    #  css: false
    #  ban: false

    ## For ROKS and CNCF, this is used to enable the creation of ingresses. The default value is "false".
    sc_ingress_enable: true

    sc_egress_configuration:
      ## Required. Enable or disable egress access to external systems.  Default will be false if not defined.
      ## true: FNCM pods will not have access to any external systems unless a custom, curated egress network policy or multiple network policies with specific 'matchLabels' are created. Please refer to documentation for more detail.
      ## false: All FNCM pods will have unrestricted network access to external systems.
      sc_restricted_internet_access: false

    ## Provide the storage class names for the storage. It can be one storage class for all storage classes or can provide different one for each.
    ## Operator will use the provided storage classes to provision required PVC volumes.
    storage_configuration:
      sc_slow_file_storage_classname: vsphere-csi-sc
      sc_medium_file_storage_classname: vsphere-csi-sc
      sc_fast_file_storage_classname: vsphere-csi-sc
    sc_service_type: NodePort
    sc_deployment_hostname_suffix: k8s-moamalat.dataserve.com.sa
    sc_ingress_annotations: []
  ldap_configuration:
    ## The possible values are: "IBM Security Directory Server" 
    ## or "Microsoft Active Directory" 
    ## or "NetIQ eDirectory" 
    ## or "Oracle Internet Directory"
    ## or "Oracle Directory Server Enterprise Edition"
    ## or "Oracle Unified Directory"
    ## or "CA eTrust"
    lc_selected_ldap_type: Microsoft Active Directory

    ## The lc_ldap_precheck parameter is used to enable or disable LDAP connection check.
    ## If set to "true", then LDAP connection check will be enabled.
    ## if set to "false", then LDAP connection check will not be enabled.
    lc_ldap_precheck: true

    ## The name of the LDAP server to connect
    lc_ldap_server: 10.0.0.72

    ## The port of the LDAP server to connect.  Some possible values are: 389, 636, etc.
    lc_ldap_port: '389'

    ## The LDAP bind secret for LDAP authentication.  The secret is expected to have ldapUsername and ldapPassword keys.  Refer to IBM Documentation for more info.
    lc_bind_secret: ldap-bind-secret

    ## The LDAP base DN.  For example, "dc=example,dc=com", "dc=abc,dc=com", etc
    lc_ldap_base_dn: DC=dev,DC=ds

    ## Enable SSL/TLS for LDAP communication. Refer to IBM Documentation for more info.
    lc_ldap_ssl_enabled: false

    ## The name of the secret that contains the LDAP SSL/TLS certificate.
    lc_ldap_user_name_attribute: user:sAMAccountName

    ## The LDAP user display name attribute. One possible value is "cn" for TDS and "sAMAccountName" for AD. Refer to IBM Documentation for more info.
    lc_ldap_user_display_name_attr: sAMAccountName

    ## The LDAP group base DN.  For example, "dc=example,dc=com", "dc=abc,dc=com", etc
    lc_ldap_group_base_dn: DC=dev,DC=ds

    ## The LDAP group name attribute.  One possible value is "*:cn" for TDS and "*:cn" for AD. Refer to IBM Documentation for more info.
    lc_ldap_group_name_attribute: '*:cn'

    ## The LDAP group display name attribute.  One possible value for both TDS and AD is "cn". Refer to IBM Documentation for more info.
    lc_ldap_group_display_name_attr: cn

    ## The LDAP group membership search filter string.  One possible value is "(|(&(objectclass=groupofnames)(member={0}))(&(objectclass=groupofuniquenames)(uniquemember={0})))" for TDS and AD
    lc_ldap_group_membership_search_filter: 
      (|(&(objectclass=groupofnames)(member=%v))(&(objectclass=groupofuniquenames)(uniquemember=%v)))

    ## The LDAP group membership ID map.  One possible value is "groupofnames:member" for TDS and "memberOf:member" for AD.
    lc_ldap_group_member_id_map: memberOf:member

    ad:
      lc_user_filter: (&(samAccountName=%v)(objectClass=user))
      lc_group_filter: (&(cn=%v)(objectclass=group))
  datasource_configuration:
    ## The dc_ssl_enabled parameter is used to support database connection over SSL for DB2/Oracle/SQLServer/PostgrSQL.
    dc_ssl_enabled: false
    ## The database_precheck parameter is used to enable or disable CPE/Navigator database connection check.
    ## If set to "true", then CPE/Navigator database connection check will be enabled.
    ## if set to "false", then CPE/Navigator database connection check will not be enabled.
    # database_precheck: true
    ## The database configuration for the GCD datasource for CPE
    dc_gcd_datasource:
      ## Provide the database type from your infrastructure.  The possible values are "db2" or "db2HADR" or "oracle" or "sqlserver" or "postgresql".
      dc_database_type: sqlserver
      ## The GCD non-XA datasource name.  The default value is "FNGCDDS".
      dc_common_gcd_datasource_name: FNGCDDS
      ## The GCD XA datasource name. The default value is "FNGCDDSXA".
      dc_common_gcd_xa_datasource_name: FNGCDDSXA
      ## Provide the database server name or IP address of the database server.
      database_servername: 10.0.0.72
      ## Provide the name of the database for the GCD for CPE.  For example: "GCDDB"
      database_name: fngcd
      ## Provide the database server port.  For Db2, the default is "50000".  For Oracle, the default is "1521"
      database_port: '1433'
      ## The name of the secret that contains the DB2/Oracle/PostgreSQL/SQLServer SSL certificate.
      dc_hadr_validation_timeout: 15
    dc_os_datasources:
      ## Provide the database type from your infrastructure.  The possible values are "db2" or "db2HADR" or "oracle" or "sqlserver" or "postgresql".  This should be the same as the 
      ## GCD configuration above.
    - dc_database_type: sqlserver
        ## Provide the object store label for the object store.  The default value is "os" or not defined.
        ## This label must match the OS secret you define in ibm-fncm-secret.
        ## For example, if you define dc_os_label: "abc", then your OS secret must be defined as:
        ## --from-literal=abcDBUsername="<your os db username>" --from-literal=abcDBPassword="<your os db password>"
        ## If you don't define dc_os_label, then your secret will be defined as:
        ## --from-literal=osDBUsername="<your os db username>" --from-literal=osDBPassword="<your os db password>".
        ## If you have multiple object stores, then you need to define multiple datasource sections starting
        ## at "dc_database_type" element.
        ## If all the object store databases share the same username and password, then dc_os_label value should be the same
        ## in all the datasource sections.
      dc_os_label: os
        ## The OS1 non-XA datasource name.  The default value is "FNOS1DS".
      dc_common_os_datasource_name: FNOS1DS
        ## The OS1 XA datasource name.  The default value is "FNOS1DSXA".
      dc_common_os_xa_datasource_name: FNOS1DSXA
        ## Provide the database server name or IP address of the database server.  This should be the same as the
        ## GCD configuration above.
      database_servername: 10.0.072
        ## Provide the name of the database for the object store 1 for CPE.  For example: "OS1DB"
      database_name: fnos
        ## Provide the database server port.  For Db2, the default is "50000".  For Oracle, the default is "1521"
      database_port: '1433'
        ## The name of the secret that contains the DB2/Oracle/PostgreSQL/SQLServer SSL certificate.
      dc_hadr_validation_timeout: 15
    dc_icn_datasource:
      ## Provide the database type from your infrastructure.  The possible values are "db2" or "db2HADR" or "oracle" or "sqlserver" or "postgresql".  This should be the same as the 
      ## GCD and object store configuration above.
      dc_database_type: sqlserver
      ## Provide the ICN datasource name.  The default value is "ECMClientDS".
      dc_common_icn_datasource_name: ECMClientDS
      database_servername: 10.0.0.72
      ## Provide the database server port.  For Db2, the default is "50000".  For Oracle, the default is "1521"
      database_port: '1433'
      ## Provide the name of the database for ICN (Navigator).  For example: "ICNDB"
      database_name: fnicn
      ## The name of the secret that contains the DB2/Oracle/PostgreSQL/SQLServer SSL certificate.
      dc_hadr_validation_timeout: 15
  initialize_configuration:
    ########################################################################
    ######## IBM FileNet Content Manager Initialization configuration ######
    ########################################################################
    ## This section is required when initializing the P8 domain and object store
    ## Please fill out the "<Required>" parameters
    ic_ldap_creation:
      ic_ldap_admin_user_name:
      - p8admin
      ic_ldap_admins_groups_name:
      - p8admins
    ic_obj_store_creation:
      object_stores:
      - oc_cpe_obj_store_display_name: OS01     # Required display name of the object store, for example, "OS01"
        oc_cpe_obj_store_symb_name: OS01     # Required symbolic name of the object store, for example, "OS01"
        oc_cpe_obj_store_conn:
          name: OS01_dbconnection
          dc_os_datasource_name: FNOS1DS     # This value must match with the non-XA datasource name in the "datasource_configuration" above.
          dc_os_xa_datasource_name: FNOS1DSXA     # This value must match with the XA datasource name in the "datasource_configuration" above.
        oc_cpe_obj_store_admin_user_groups:
        - p8admins
        - p8admin
  verify_configuration:
    ########################################################################
    ######## IBM FileNet Content Manager Verification configuration ######
    ########################################################################
    ## After the initialization process (see section above), the verification process will take place.
    ## The verification process ensures that the FNCM and BAN components are functioning correctly.  The verification
    ## process includes creation of a CPE folder, a CPE document, a CBR search, verifying the workflow configuration,
    ## and validation of the ICN desktop.
    vc_cpe_verification:
      vc_cpe_folder:
      - folder_cpe_obj_store_name: OS01
        folder_cpe_folder_path: /TESTFOLDER
      vc_cpe_document:
      - doc_cpe_obj_store_name: OS01
        doc_cpe_folder_name: /TESTFOLDER
        doc_cpe_doc_title: test_title
        DOC_CPE_class_name: Document
        doc_cpe_doc_content: This is a simple document test
        doc_cpe_doc_content_name: doc_content_name
      vc_cpe_cbr:
      - cbr_cpe_obj_store_name: OS01
        cbr_cpe_class_name: Document
        cbr_cpe_search_string: is a simple
      vc_cpe_workflow:
      - workflow_cpe_enabled: false
        workflow_cpe_connection_point: pe_conn_os1
    vc_icn_verification:
    - vc_icn_repository: OS01repo
      vc_icn_desktop_id: desktop1
  # ########################################################################
  # ########   IBM Business Automation Navigator configuration      ########
  # ########################################################################
  navigator_configuration:
    # send mail
    java_mail:
      host: 10.0.0.72
      port: '465'
      sender: p8admin@dataserve.com.sa
      ssl_enabled: false
